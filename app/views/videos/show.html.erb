<p style="color: green"><%= notice %></p>
<div class="grid grid-cols-4 grid-rows-1">
  <div class="px-2 py-5 text-sm">
      <h3>Tags</h3>
      <div id="<%= dom_id @video%>_tags" class="px-0 py-2">
        <%= render "show_tags", video: @video %>
      </div>
      <div class="text-black">
        <%= form_with(method: :get, url: add_tag_video_path(@video)) do |form| %>
          <%= form.text_area :tag, placeholder: 'Comma-delimited tags to add', rows: 4, cols: 36 %>
          <%= form.submit value: "Add Tags", class: "action-primary" %>
        <% end %>
      </div>
      <div class="mt-2">
        <%= link_to "Next Untagged Video", next_untagged_video_videos_path, class: "action-secondary" %>
      </div>
      <div class="mt-2">
        <p class="text-sm break-words">
          <h3>Whisper Transcription <small>(<%= @video.whisper_model %>)</small></h3>
          <hr>
          <%= @video.whisper_txt %>
        </p>
      </div>
    
      </div>

  <div class="px-2 py-5 items-center">
      <%= render @video, width: "100%", height: 600, show_tags: 'false' %>
      <div class="mt-2">
        <div class="grid grid-cols-3">
          <%= link_to "Edit Video", edit_video_path(@video), class: "action-edit" %>
          <%= link_to "Videos Index", videos_path, class: "action-back" %>
          <%= button_to "Destroy video", @video, method: :delete, class: "action-destroy", data: {confirm: "Are you sure you want to destroy this video?"} %>
        </div>
      </div>
  </div>

  <% video_id = dom_id @video %>
  <% existing_tags = ActsAsTaggableOn::Tag.pluck(:name) %>
  <% spaceless_tags = existing_tags.map{|t| t.gsub(" ", "")} %>
  <% already_on_video_tags = @video.tag_list %>

  <div class="px-2 py-5 text-xs col-span-2">
    <% @video.ai_markups.each do |aim| %>
      <h3 class="pt-3">AI Markup <small>(<%= aim.generating_model_name %>)</small></h3>
      <hr>
      <% aim.attributes.except("id", "video_id", "created_at", "updated_at", "generating_model_name").each do |k,v| %>
        <% next if v.blank? %>
        <% if k.start_with?("hashtags_") %>
          <div>
            <span class="font-bold"><%= k %></span>:
            <% v.split(",").each do |tag| %>
              <% 
                # normalize tag to be downcased with spaces
                normalized = tag.titleize.downcase.strip
                # Use regex to insert a space between any letter and digit, or digit and letter
                normalized = normalized.gsub(/(?<=[A-Za-z])(?=\d)|(?<=\d)(?=[A-Za-z])/, ' ')
              %>
              <% # render bold if tag is already on video %>
              <% if already_on_video_tags.include?(tag) || already_on_video_tags.include?(normalized) || already_on_video_tags.include?(normalized.gsub(" ","-")) || already_on_video_tags.detect{|t| t.gsub(" ","") == normalized} %>
                <span class="px-3 font-bold"><%= tag %></span>
              <% elsif existing_tags.include?(normalized) || spaceless_tags.include?(normalized) %>
                <% tag_to_use = existing_tags.include?(normalized) ? normalized : nil %>
                <% tag_to_use ||= existing_tags.detect{|t| t.gsub(" ","") == normalized} %>
                <span class="cursor-pointer" data-controller="video" data-action="click->video#addTag" data-video-videoid-value="<%= @video.id %>" data-video-tag-value="<%= tag_to_use %>">
                  <span class="px-2">+<%= tag %></span>
                </span>
                <% # link_to "+#{tag}", add_tag_video_path(@video, tag: tag_to_use) %>
              <% elsif tag.index(" ").nil? || tag.titleize.index(" ") %>
                <% # render link to add tag to video %>
                <span class="cursor-pointer" data-controller="video" data-action="click->video#addTag" data-video-videoid-value="<%= @video.id %>" data-video-tag-value="<%= tag %>">
                  <span class="px-2">++<%= tag %></span>
                </span>
                <% # link_to "++#{tag}", add_tag_video_path(@video, tag: tag) %>
              <% else %>
                <span class="px-2"><%= tag %></span>
              <% end %>
            <% end %>
          </div>
          <% elsif k.start_with?("title_") %>
          <div>
            <span class="font-bold"><%= k %></span>: 
            <% if @video.title.downcase == v.downcase.gsub('"','') %>
              <span class="font-bold"><%= v %></span>
            <% else %>
              <% # render link to set title to this value %>
              <span class="cursor-pointer" data-controller="video" data-action="click->video#setTitle" data-video-videoid-value="<%= @video.id %>" data-video-title-value="<%= v %>"><%= v %></span>
              <% # link_to v, set_title_video_path(@video, title: v) %>
            <% end %>
          </div>
        <% elsif k.start_with?("summary_") %>
          <div>
            <span class="font-bold"><%= k %></span>: <%= v %>
          </div>

        <% else %>
          <div><span class="font-bold"><%= k %></span>: <%= v %></div>
        <% end %>
      <% end %>
    <% end %>
    <% whisper_tsv = @video.whisper_tsv %>
    <% if whisper_tsv.present? %>

      <h3 class="pt-3">Whisper TSV <small>(<%= @video.whisper_model %>)</small></h3>
      <hr>
      <div class="grid grid-cols-10">
          <% lines = whisper_tsv.split("\n") %>
          <% #skip first line - fun fact: doing array range with 3 dots [1...-1] will leave off the last line :( %>
          <% lines[1..-1].each do |line| %>
            <% parts = line.split("\t") %>
              <% ts1 = convert_tsv_timestamp(parts[0])  %>
              <% ts2 = convert_tsv_timestamp(parts[1])  %>
              <div><%= ts1[:display] %></div>
              <div><%= ts2[:display] %></div>
              <div onclick='video_seek(<%= ts1[:seconds]%>);' data-start-seconds="<%= ts1[:seconds] %>" data-end-seconds="<%= ts2[:seconds] %>" class="tsv-transcript col-span-8"><%= parts[2] %></div>
          <% end %>
      </div>  
    <% end %>

  </div>

</div>

<script>
  var js_video = document.getElementById("<%= video_id %>");
  js_video.ontimeupdate = function() {highlight_tsv()};

function highlight_tsv() {
  // Find the .tsv-transcript element with data-start-seconds <= current time < data-end-seconds
  var current_time = js_video.currentTime;
  var divs = document.querySelectorAll(".tsv-transcript")
  for (var i = 0; i < divs.length; i++) {
    var div = divs[i];
    var start_seconds = div.getAttribute("data-start-seconds");
    var end_seconds = div.getAttribute("data-end-seconds");
    if (start_seconds <= current_time && current_time < end_seconds) {
      div.classList.add("bg-green-600");
    } else {
      div.classList.remove("bg-green-600");
    }
  }
}

  function video_seek(time) {
    js_video.currentTime = time;
  }
</script>